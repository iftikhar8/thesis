library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("Hmisc")
library("Hmisc", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
head(cars)
head(mtcars)
mtcars$name <- rownames(mtcars)
mtcars
meltedcars <- melt(mtcars,id=c("name","cyl","gear"),measure=c("mpg","hp"))
meltedcars
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
ls
ls()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(5:20))
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran,r_version == "3.1.1", country == "US")
?Comparison
filter(cran,r_version <= "3.0.2", country == "IN")
filter(cran,country == "US" | country == "IN")
filter(cran,r_os=="linux-gnu",size > 100500)
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dyplr)
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- groupby(cran,package)
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
?n
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(cran,count > 679)
top_counts <- filter(packsum,count > 679)
top_counts <- filter(pack_sum,count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,count)
top_counts_sorted <- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum,unique > 679)
top_unique <- filter(pack_sum,unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students,key,value,-grade)
res <- gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,into=c("sex,"class""))
separate(res,sex_class,into=c("sex,"class"))
separate(res,sex_class,c("sex","class"))
submit()
student3
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed,status,"passed")
passed <- mutate(passed,status="passed")
failed <- mutate(failed,status="failed")
failed
bind_rows(passed,failed)
sat
submit()
submit()
voyage_scen1 <- read.csv("~/Documents/data/voyage_scen1.csv")
View(voyage_scen1)
install.packages("GAD")
library("GAD", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
View(voyage_scen1)
mydata <- voyage_scen1
L <- as.random(mydata$Location)
F <- as.fixed(mydata$Feature)
S <- as.random(mydata$Station)
D <- as.fixed(mydata$Depth)
model <- lm(Length ~ L + F + L*F + S%in%F + L*(S%in%F) +
D + L*D + F*D + L*F*D + (S%in%F)*D + L*(S%in%F)*D, data=mydata )
gad(model)
L <- as.random(mydata$Location)
F <- as.fixed(mydata$Feature)
S <- as.random(mydata$Station)
D <- as.fixed(mydata$Depth)
model <- lm(Clupeidae ~ L + F + L*F + S%in%F + L*(S%in%F) +
D + L*D + F*D + L*F*D + (S%in%F)*D + L*(S%in%F)*D, data=mydata )
gad(model)
estimates(model)
C.test(model)
Voyage_data <- read.csv("~/Dropbox/Phd/Voyage_data.csv")
View(Voyage_data)
boxplot(Voyage_data$Labridae)
boxplot(Voyage_data)
fish <- Voyage_data[3:13,]
boxplot(fish)
View(fish)
fish <- Voyage_data[c(-1,-2)]
boxplot(fish)
boxplot(fish,las=2)
summary(fish)
fish_surface<-Voyage_data$Depth=='Surface'
fish_surface<-Voyage_data[Voyage_data$Depth=='Surface']
fish_surface<-Voyage_data[Voyage_data$Depth=='Surface',]
fish_top<-Voyage_data[Voyage_data$Depth=='Top',]
fish_bottom<-Voyage_data[Voyage_data$Depth=='Bottom',]
boxplot(fish_surface)
boxplot(fish_surface, las=2)
boxplot(fish_top, las=2)
boxplot(fish_bottom, las=2)
p <- ggplot(data=Voyage_data, aes(y=Labridae,x=Site))
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
p <- ggplot(data=Voyage_data, aes(y=Labridae,x=Site))
p
install.packages(c("boot", "chron", "class", "cluster", "codetools", "dplyr", "foreign", "gridExtra", "httr", "KernSmooth", "lattice", "manipulate", "maps", "MASS", "Matrix", "matrixStats", "mgcv", "nlme", "nnet", "plyr", "quantmod", "R6", "Rcpp", "RCurl", "rpart", "scales", "spatial", "stringi", "survival", "testthat", "TTR", "XML"))
install.packages(c("boot", "chron", "class", "cluster", "codetools",
install.packages(c("boot", "chron", "class", "cluster", "codetools", "dplyr", "foreign", "gridExtra", "httr", "KernSmooth", "lattice", "manipulate", "maps", "MASS", "Matrix", "matrixStats", "mgcv", "nlme", "nnet", "plyr", "quantmod", "R6", "Rcpp", "RCurl", "rpart", "scales", "spatial", "stringi", "survival", "testthat", "TTR", "XML"))
install.packages(c("boot", "chron", "class", "cluster", "codetools",
View(fish_top)
r
version
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
p <- ggplot(data=Voyage_data, aes(y=Labridae,x=Site))
p + geom_point()
p + geom_point(aes(colour=Depth))
p + geom_point(aes(shape=Depth))
data <- read.csv("~/Dropbox/Phd/Voyage_data.csv")
View(data)
mydata <- data[c(-5,-6)]
View(mydata)
p <- ggplot(data=mydata, aes(y=Count,x=Species))
p + geom_point(aes(colour=Depth))
p + geom_point(aes(shape=Depth))
p + geom_point(aes(shape=Depth,colour=Site))
p <- ggplot(data=mydata, aes(y=Count,x=Site))
p + geom_point(aes(shape=Depth,colour=Species))
boxplot(mydata)
boxplot(mydata~Species)
boxplot(Species~Depth,data=myData)
boxplot(Species~Depth,data=mydata)
View(mydata)
boxplot(Species,data=mydata)
boxplot(mydata$Species)
boxplot(mydata,formula = Count ~ Species)
boxplot(Count ~ Species,data=mydata)
boxplot(Count ~ Depth,data=mydata)
boxplot(Count ~ Depth*Species,data=mydata)
boxplot(Count ~ Depth*Species,data=mydata,las=2
)
boxplot(Count ~ Depth*Site,data=mydata,las=2)
boxplot(Count ~ Species*Site,data=mydata,las=2)
boxplot(Count ~ Species*Depth,data=mydata,las=2)
p <- ggplot(data=mydata, aes(y=Count,x=Species))
p + geom_point(aes(shape=Depth,colour=Site))
p + geom_point(aes(shape=Site,colour=Depth))
mydata$Site <- factor(mydata$Site)
p <- ggplot(data=mydata, aes(y=Count,x=Species))
p + geom_point(aes(shape=Site,colour=Depth))
p + geom_point(aes(shape=Depth,colour=Site))
p <- ggplot(data=mydata, aes(y=Count,x=Site))
p + geom_point(aes(shape=Depth,colour=Species))
p <- ggplot(data=mydata, aes(y=Count,x=Depth))
p + geom_point(aes(colour=Species))
p <- ggplot(data=mydata, aes(y=Count,x=Depth))
p + geom_point() + facet_wrap(~Species)
p + geom_point() + facet_wrap(Site~Species)
p + geom_point() + facet_wrap(Species)
p + geom_point() + facet_wrap(~Species)
p <- ggplot(data=mydata, aes(y=Count,x=Site))
p + geom_point() + facet_wrap(~Species)
p + geom_point(aes(shape=Depth)) + facet_wrap(~Species)
p + geom_point(aes(colour=Depth)) + facet_wrap(~Species)
reef_fish <- mydata[mydata$Species!='Platycephalus' & mydata$Species!='Trachurus']
View(mydata)
reef_fish <- mydata[mydata$Species!='Platycephalus' & mydata$Species!='Trachurus',]
p <- ggplot(data=reef_fish, aes(y=Count,x=Site))
p + geom_point(aes(colour=Depth)) + facet_wrap(~Species)
p + geom_point(aes(shape=Depth)) + facet_wrap(~Species)
p + geom_point(aes(color=Depth)) + facet_wrap(~Species)
data <- read.csv("~/Dropbox/Phd/Voyage_data.csv")
mydata <- data[c(-5,-6)]
mydata$Site <- factor(mydata$Site)
reef_fish <- mydata[mydata$Species!='Platycephalus' & mydata$Species!='Trachurus',]
p <- ggplot(data=reef_fish, aes(y=Count,x=Site))
p + geom_point(aes(colour=Depth)) + facet_wrap(~Species)
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl
swirl()
data <- read.csv("~/Dropbox/Phd/Voyage_data.csv")
mydata <- data[c(-5,-6)]
mydata$Site <- factor(mydata$Site)
reef_fish <- mydata[mydata$Species!='Platycephalus' & mydata$Species!='Trachurus',]
p <- ggplot(data=reef_fish, aes(y=Count,x=Site))
p + geom_point(aes(colour=Depth)) + facet_wrap(~Species)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("boot", "chron", "class", "cluster", "codetools", "data.table", "dplyr", "foreign", "gridExtra", "Hmisc", "httpuv", "httr", "jsonlite", "KernSmooth", "lattice", "manipulate", "maps", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "nlme", "nnet", "plyr", "quantmod", "R6", "Rcpp", "RCurl", "rJava", "RMySQL", "RNetCDF", "rpart", "scales", "spatial", "stringi", "survival", "testthat", "tidyr", "TTR", "XML"))
data <- read.csv("~/Dropbox/Phd/Voyage_data.csv")
mydata <- data[c(-5,-6)]
mydata$Site <- factor(mydata$Site)
reef_fish <- mydata[mydata$Species!='Platycephalus' & mydata$Species!='Trachurus',]
p <- ggplot(data=reef_fish, aes(y=Count,x=Site))
p + geom_point(aes(colour=Depth)) + facet_wrap(~Species)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
data <- read.csv("~/Dropbox/Phd/Voyage_data.csv")
mydata <- data[c(-5,-6)]
mydata$Site <- factor(mydata$Site)
reef_fish <- mydata[mydata$Species!='Platycephalus' & mydata$Species!='Trachurus',]
p <- ggplot(data=reef_fish, aes(y=Count,x=Site))
p + geom_point(aes(colour=Depth)) + facet_wrap(~Species)
matrix <- read.csv("connectivity_matrix.csv", sep=",")
setwd("~/Documents/PhD/Thesis/metrics/figures")
matrix <- read.csv("connectivity_matrix.csv", sep=",")
cm_heatmap <- data.frame(
settlement = as.numeric(matrix),
origin = as.numeric(floor(matrix))
destination = as.numeric(cycle(matrix))
)
cm_heatmap <- data.frame(
settlement = as.numeric(matrix),
origin = as.numeric(floor(matrix)),
destination = as.numeric(cycle(matrix))
)
View(matrix)
library(reshape2)
(res <- melt(as.data.frame(matrix), id="Sites"))
View(res)
setNames(res[c("Sites", "variable", "value")], c("origin", "dest", "value"))
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
p <- ggplot(res, aes(x=dest,y=origin,fill=value))
p+ geom_tile()
p+geom_raster()
View(res)
res <- setNames(res[c("Sites", "variable", "value")], c("origin", "dest", "value"))
View(res)
p <- ggplot(res, aes(x=dest,y=origin,fill=value))
p+ geom_tile()
p+geom_raster()
p <- ggplot(res, aes(x=origin,y=dest,fill=value))
p+ geom_tile()
matrix <- read.csv("connectivity_matrix.csv", sep=",")
library(reshape2)
(res <- melt(as.data.frame(matrix), id="Sites"))
res <- setNames(res[c("Sites", "variable", "value")], c("origin", "dest", "value"))
p <- ggplot(res, aes(x=origin,y=dest,fill=value))
p+ geom_tile()
p+geom_raster()
View(matrix)
matrix <- read.csv("connectivity_matrix.csv", sep=",")
library(reshape2)
(res <- melt(as.data.frame(matrix), id="Sites"))
res <- setNames(res[c("Sites", "variable", "value")], c("origin", "dest", "value"))
p <- ggplot(res, aes(x=origin,y=dest,fill=value))
p+ geom_tile()
p+geom_raster()
p <- ggplot(res, aes(x=origin,y=dest,fill=value))
p+ geom_tile() + scale_x_discrete()
p <- ggplot(res, aes(x=origin,y=dest,fill=value))
p+ geom_tile() + scale_x_continuous() + scale_y_reverse()
p <- ggplot(res, aes(x=origin,y=dest,fill=value))
p+ geom_tile() + scale_y_reverse()
p <- ggplot(res, aes(x=origin,y=dest,fill=value))
p+ geom_tile() + scale_x_discrete()
p <- ggplot(res, aes(x=factor(origin),y=dest,fill=value))
p+ geom_tile() + scale_x_discrete()
p <- ggplot(res, aes(x=factor(origin),y=factor(dest),fill=value))
p+ geom_tile() + scale_x_discrete()
site_levels <- names(matrix)
site_levels
site_levels <- [,2-20]
site_levels <- names(matrix)
site_levels <- site_levels(-1)
site_levels <- names(matrix)
site_levels <- site_levels[-1]
matrix <- read.csv("connectivity_matrix.csv", sep=",")
library(reshape2)
res <- melt(as.data.frame(matrix), id="Sites")
res <- setNames(res[c("Sites", "variable", "value")], c("origin", "dest", "value"))
site_levels <- names(matrix)
site_levels <- site_levels[-1]
res$origin <- factor(res$origin2, levels = site_levels)
res$dest <- factor(res$dest2, levels = site_levels)
p <- ggplot(res, aes(x=origin2,y=dest2,fill=value))
p+ geom_tile()
matrix <- read.csv("connectivity_matrix.csv", sep=",")
library(reshape2)
res <- melt(as.data.frame(matrix), id="Sites")
res <- setNames(res[c("Sites", "variable", "value")], c("origin", "dest", "value"))
site_levels <- names(matrix)
site_levels <- site_levels[-1]
res$origin2 <- factor(res$origin, levels = site_levels)
res$dest2 <- factor(res$dest, levels = site_levels)
p <- ggplot(res, aes(x=origin2,y=dest2,fill=value))
p+ geom_tile()
p <- ggplot(res, aes(x=origin2,y=dest2,fill=value)) + scale_fill_gradient(low = "white",
+     high = "steelblue"
p+ geom_tile()
p <- ggplot(res, aes(x=origin2,y=dest2,fill=value))
+ scale_fill_gradient(low = "white",high = "steelblue")
p + geom_tile()
p <- ggplot(res, aes(x=origin2,y=dest2,fill=value))
p + geom_tile() + scale_fill_gradient(low = "white",high = "steelblue")
matrix <- read.csv("connectivity_matrix.csv", sep=",")
library(reshape2)
res <- melt(as.data.frame(matrix), id="Sites")
res <- setNames(res[c("Sites", "variable", "value")], c("origin", "dest", "value"))
site_levels <- names(matrix)
site_levels <- site_levels[-1]
res$origin2 <- factor(res$origin, levels = site_levels)
res$dest2 <- factor(res$dest, levels = site_levels)
p <- ggplot(res, aes(x=dest2,y=origin2,fill=value))
p + geom_tile() + scale_fill_gradient(low = "white",high = "steelblue") + labs(x = "Destination",y = "Origin")
matrix <- read.csv("connectivity_matrix.csv", sep=",")
library(reshape2)
res <- melt(as.data.frame(matrix), id="Sites")
res <- setNames(res[c("Sites", "variable", "value")], c("origin", "dest", "value"))
site_levels <- names(matrix)
site_levels <- site_levels[-1]
res$origin2 <- factor(res$origin, levels = site_levels)
res$dest2 <- factor(res$dest, levels = site_levels)
p <- ggplot(res, aes(x=dest2,y=origin2))
p + geom_tile(aes(fill=value)) + scale_fill_gradient(name = "Settlement (%)",low = "white",high = "steelblue") + labs(x = "Destination",y = "Origin")
matrix <- read.csv("connectivity_matrix.csv", sep=",")
library(reshape2)
res <- melt(as.data.frame(matrix), id="Sites")
res <- setNames(res[c("Sites", "variable", "value")], c("origin", "dest", "value"))
site_levels <- names(matrix)
site_levels <- site_levels[-1]
res$origin2 <- factor(res$origin, levels = site_levels)
res$dest2 <- factor(res$dest, levels = site_levels)
p <- ggplot(res, aes(x=dest2,y=origin2))
p + geom_tile(aes(fill=value)) + scale_fill_gradient(name = "Settlement (%)",low = "white",high = "steelblue") + labs(x = "Destination",y = "Origin")
matrix <- read.csv("connectivity_matrix.csv", sep=",")
library(reshape2)
res <- melt(as.data.frame(matrix), id="Sites")
res <- setNames(res[c("Sites", "variable", "value")], c("origin", "dest", "value"))
site_levels <- names(matrix)
site_levels <- site_levels[-1]
res$origin2 <- factor(res$origin, levels = site_levels)
res$dest2 <- factor(res$dest, levels = site_levels)
p <- ggplot(res, aes(x=dest2,y=origin2))
p + geom_tile(aes(fill=value)) + scale_fill_gradient(name = "Settlement (%)",low = "white",high = "steelblue") + labs(x = "Destination",y = "Origin")
View(res)
View(matrix)
matrix <- read.csv("connectivity_matrix.csv", sep=",")
library(reshape2)
res <- melt(as.data.frame(matrix), id="Sites")
res <- setNames(res[c("Sites", "variable", "value")], c("origin", "dest", "value"))
site_levels <- names(matrix)
site_levels <- site_levels[-1]
res$origin2 <- factor(res$origin, levels = site_levels)
res$dest2 <- factor(res$dest, levels = site_levels)
p <- ggplot(res, aes(x=dest2,y=origin2))
p + geom_tile(aes(fill=value)) + scale_fill_gradient(name = "Settlement (%)",low = "white",high = "steelblue") + labs(x = "Destination",y = "Origin") +scale_y_reverse()
site_levels_reverse <- reverse(site_levels)
site_levels_reverse <- sort(site_levels,decreasing = FALSE)
site_levels_reverse <- sort(site_levels,decreasing = TRUE)
site_levels_reverse
matrix <- read.csv("connectivity_matrix.csv", sep=",")
library(reshape2)
res <- melt(as.data.frame(matrix), id="Sites")
res <- setNames(res[c("Sites", "variable", "value")], c("origin", "dest", "value"))
site_levels <- names(matrix)
site_levels <- site_levels[-1]
site_levels_reverse <- c("S10" ,"S9",  "S8" , "S7"  ,"S6" , "S5" , "S4" , "S3" , "S2" ,"S1")
res$origin2 <- factor(res$origin, levels = site_levels_reverse)
res$dest2 <- factor(res$dest, levels = site_levels)
p <- ggplot(res, aes(x=dest2,y=origin2))
p + geom_tile(aes(fill=value)) + scale_fill_gradient(name = "Settlement (%)",low = "white",high = "steelblue") + labs(x = "Destination",y = "Origin")
